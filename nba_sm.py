# -*- coding: utf-8 -*-
"""nba SM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fyNcRZnRbo3xwanQMF8jjUcTGMLFN2OS
"""

import pandas as pd
import numpy as np
import requests
import time

# pd.set_option('display.max_columns', None) # wide dataframe

test_url1 = 'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=S&Season=2011-12&SeasonType=Regular%20Season&StatCategory=PTS'
r = requests.get(url=test_url1).json()
table_headers = r['resultSet']['headers']
df2011 = pd.DataFrame(r['resultSet']['rowSet'], columns=table_headers)
print(df2011)
# 2011-12

test_url2 = 'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=S&Season=2015-16&SeasonType=Regular%20Season&StatCategory=PTS'
r = requests.get(url=test_url2).json()
table_headers = r['resultSet']['headers']
df2015 = pd.DataFrame(r['resultSet']['rowSet'], columns=table_headers)
print(df2015)
# 2015-16

# 2011
new_df2011 = df2011[['PLAYER_ID', 'PLAYER', 'PTS', 'REB', 'MIN']]
print(new_df2011)

# 2015
new_df2015 = df2015[['PLAYER_ID', 'PLAYER', 'PTS', 'REB', 'MIN']]
print(new_df2015)

# hard dry code for number of common players
common = pd.DataFrame()
count = 0
com_pd = []
for i in new_df2011['PLAYER_ID']:
    for j in new_df2015['PLAYER_ID']:
        if i == j:
            count += 1
            com_pd.append(i)

print(count)
print(common)

# new dataframe with only common players
df = pd.merge(new_df2011, new_df2015, on='PLAYER_ID', how='inner').drop('PLAYER_y', axis=1)
df.columns = ["PLAYER_ID", 'NAME', 'POINTS 2011', 'REBOUNDS 2011', 'MINS 2011', 'POINTS 2015', 'REBOUNDS 2015',
              'MINS 2015']
print(df)

# Commented out IPython magic to ensure Python compatibility.
# data analysis
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm

points = ['POINTS 2011', 'REBOUNDS 2011', 'MINS 2011', 'POINTS 2015', 'REBOUNDS 2015', 'MINS 2015']
df[points].describe()

fig, axs = plt.subplots(2, 2, figsize=(10, 10))
sns.histplot(data=df, x="POINTS 2011", kde=True, color="red", ax=axs[0, 0])
sns.histplot(data=df, x="POINTS 2015", kde=True, color="blue", ax=axs[0, 1])
sns.histplot(data=df, x="MINS 2011", kde=True, color="green", ax=axs[1, 1])
sns.histplot(data=df, x="MINS 2015", kde=True, color="orange", ax=axs[1, 0])

fig, axs = plt.subplots(2, 2, figsize=(15, 8))
sns.boxplot(df['MINS 2011'], ax=axs[0, 0])
sns.boxplot(df['MINS 2015'], ax=axs[0, 1])
sns.boxplot(df['REBOUNDS 2011'], ax=axs[1, 0])
sns.boxplot(df['REBOUNDS 2015'], ax=axs[1, 1])

# 2011 POINTS
qm25, qm50, qm75 = np.percentile(df['POINTS 2011'], [25, 50, 75])
iqrm = qm75 - qm25
minm = qm25 - 1.5 * iqrm
maxm = qm75 + 1.5 * iqrm
data = df[(df['POINTS 2011'] > minm) & (df['POINTS 2011'] < maxm)]

# 2015 POINTS
qm25, qm50, qm75 = np.percentile(df['POINTS 2015'], [25, 50, 75])
iqrm = qm75 - qm25
minm = qm25 - 1.5 * iqrm
maxm = qm75 + 1.5 * iqrm
data = df[(df['POINTS 2015'] > minm) & (df['POINTS 2015'] < maxm)]

# skewness
crocks = data[['POINTS 2011', 'POINTS 2015', 'REBOUNDS 2011', 'REBOUNDS 2015', 'MINS 2011', 'MINS 2015']]
skew_limit = 0.75
skew_vals = crocks.skew()
print(skew_vals)

sns.pairplot(data, plot_kws=dict(alpha=.1, edgecolor='none'))

# hypothesis using library
from scipy.stats import ttest_ind
import numpy as np

print(data)
points11 = np.mean(df['POINTS 2011'])
points15 = np.mean(df['POINTS 2015'])
print("POINTS 2011 mean value:", points11)
print("POINTS 2015 mean value:", points15)
pt11_std = np.std(df['POINTS 2011'])
pt15_std = np.std(df['POINTS 2015'])
print("POINTS 2011 std value:", pt11_std)
print("POINTS 2015 std value:", pt15_std)
ttest, pval = ttest_ind(points11, points15)
true = 'Players played better in 2011-12'
false = 'Players did not play better in 2011-12, they played better in 2015-16'
print("p-value", pval)
if pval < 0.05:
    print("we reject null hypothesis")
    print(false)
else:
    print("we accept null hypothesis")
    print(true)
